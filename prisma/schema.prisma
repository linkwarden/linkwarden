generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            Int
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       Int
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id   Int    @id @default(autoincrement())
  name String

  username String? @unique

  email         String?   @unique
  emailVerified DateTime?
  image         String?

  accounts Account[]
  sessions Session[]

  password    String
  collections Collection[]

  tags Tag[]

  pinnedLinks Link[]

  collectionsJoined UsersAndCollections[]
  isPrivate         Boolean               @default(false)
  whitelistedUsers  WhitelistedUser[]
  createdAt         DateTime              @default(now())
}

model WhitelistedUser {
  id Int @id @default(autoincrement())

  username String @default("")
  User     User?  @relation(fields: [userId], references: [id])
  userId   Int?
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Collection {
  id          Int     @id @default(autoincrement())
  name        String
  description String  @default("")
  color       String  @default("#0ea5e9")
  isPublic    Boolean @default(false)

  owner     User                  @relation(fields: [ownerId], references: [id])
  ownerId   Int
  members   UsersAndCollections[]
  links     Link[]
  createdAt DateTime              @default(now())

  @@unique([name, ownerId])
}

model UsersAndCollections {
  user         User       @relation(fields: [userId], references: [id])
  userId       Int

  collection   Collection @relation(fields: [collectionId], references: [id])
  collectionId Int

  canCreate    Boolean
  canUpdate    Boolean
  canDelete    Boolean

  @@id([userId, collectionId])
}

model Link {
  id             Int        @id @default(autoincrement())
  name           String
  url            String
  description    String     @default("")

  pinnedBy       User[]

  collection     Collection @relation(fields: [collectionId], references: [id])
  collectionId   Int
  tags           Tag[]

  createdAt      DateTime   @default(now())
}

model Tag {
  id      Int    @id @default(autoincrement())
  name    String
  links   Link[]
  owner   User   @relation(fields: [ownerId], references: [id])
  ownerId Int

  @@unique([name, ownerId])
}
